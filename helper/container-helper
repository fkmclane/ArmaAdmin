#!/usr/bin/env python3
import os
import os.path
import re
import shutil
import subprocess
import sys
import tempfile


if not os.path.normpath(sys.argv[1]).startswith('/var/lib/mcp/'):
    sys.exit(1)


with tempfile.TemporaryDirectory() as tmp:
    os.makedirs(os.path.join(tmp, 'srv'), exist_ok=True)

    os.makedirs(os.path.join(tmp, 'proc'), exist_ok=True)
    os.makedirs(os.path.join(tmp, 'sys'), exist_ok=True)
    os.makedirs(os.path.join(tmp, 'tmp'), exist_ok=True)
    os.makedirs(os.path.join(tmp, 'dev'), exist_ok=True)
    os.makedirs(os.path.join(tmp, 'run'), exist_ok=True)

    os.makedirs(os.path.join(tmp, 'usr', 'lib'), exist_ok=True)
    shutil.copy2(os.path.join('/', 'usr', 'lib', 'os-release'), os.path.join(tmp, 'usr', 'lib', 'os-release'))

    libraries = {}
    for line in subprocess.check_output(['ldd', os.path.join(sys.argv[1], sys.argv[2])]).splitlines():
        match = re.match('\t(.*) => (.*) \(0x|\t(/.*) \(0x', line.decode())
        if match:
            if match.group(1) and match.group(2):
                libraries[os.path.join('lib64' if '/lib64/' in match.group(2) else 'lib', match.group(1))] = match.group(2)
            elif match.group(3):
                libraries[match.group(3)[1:]] = match.group(3)

    for library, path in libraries.items():
        os.makedirs(os.path.join(tmp, os.path.dirname(library)), exist_ok=True)

        shutil.copy2(path, os.path.join(tmp, library))

    subprocess.call(['systemd-nspawn', '-qUD', tmp, '--chdir', os.path.join('/', 'srv', 'var'), '--bind', sys.argv[1] + ':' + os.path.join('/', 'srv'), os.path.join('/', 'srv', sys.argv[2])] + sys.argv[3:])
