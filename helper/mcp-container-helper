#!/usr/bin/env python3
import os
import os.path
import re
import signal
import shutil
import subprocess
import sys
import tempfile
import time


if not os.path.normpath(sys.argv[1]).startswith('/var/lib/mcp/servers/'):
    sys.exit(1)


try:
    tmp = tempfile.mkdtemp()
except:
    sys.exit(1)

try:
    uid = 131072

    os.makedirs(os.path.join(tmp, 'srv'), exist_ok=True)
    if subprocess.call(['/usr/bin/bindfs', '--map=mcp/{uid}:@mcp/@{uid}'.format(uid=uid), sys.argv[1], os.path.join(tmp, 'srv')]):
        raise RuntimeError()

    os.makedirs(os.path.join(tmp, 'usr', 'lib'), exist_ok=True)
    shutil.copy2(os.path.join('/', 'usr', 'lib', 'os-release'), os.path.join(tmp, 'usr', 'lib', 'os-release'))

    libraries = {}

    try:
        for line in subprocess.check_output(['ldd', os.path.join(sys.argv[1], sys.argv[2])]).splitlines():
            match = re.match('\t(.*) => (.*) \(0x|\t(/.*) \(0x', line.decode())
            if match:
                if match.group(1) and match.group(2):
                    libraries[os.path.join('lib64' if '/lib64/' in match.group(2) else 'lib', match.group(1))] = match.group(2)
                elif match.group(3):
                    libraries[match.group(3)[1:]] = match.group(3)
    except subprocess.CalledProcessError:
        pass

    for library, path in libraries.items():
        os.makedirs(os.path.join(tmp, os.path.dirname(library)), exist_ok=True)

        shutil.copy2(path, os.path.join(tmp, library))

    proc = subprocess.Popen(['/usr/bin/systemd-nspawn', '--private-users={uid}'.format(uid=uid), '--private-users-chown', '--kill-signal=SIGRTMIN+3', '-qaD', tmp, os.path.join('/', 'srv', sys.argv[2])] + sys.argv[3:])

    def terminate(signum=None, frame=None):
        if proc.poll() is None:
            proc.terminate()
            try:
                proc.wait(5)
            except subprocess.TimeoutExpired:
                proc.terminate()
                proc.wait()

    signal.signal(signal.SIGTERM, terminate)
    signal.signal(signal.SIGINT, terminate)

    while proc.poll() is None:
        time.sleep(0.1)
except:
    sys.exit(1)
finally:
    try:
        terminate()

        subprocess.call(['/bin/umount', os.path.join(tmp, 'srv')])

        shutil.rmtree(tmp)
    except:
        pass
